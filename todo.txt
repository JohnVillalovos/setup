todo:
* record all osx system settings that you like and write code to apply them
  - like setting sublime text as the system default editor
    http://apple.stackexchange.com/questions/123833/replace-text-edit-as-the-default-text-editor

    I haven't done this yet because I can't find documentation on it,
    and even though I have my default editor set to sublime text, when I
    run 'defaults read' to see all my current settings it doesn't show up
  - and setting keyboard shortcuts like mapping F12 to mission control

some neat items here:
https://github.com/donnemartin/dev-setup/blob/master/osx.sh

* maybe change lld to be a function that notices if it takes an argument and
  does the right thing, either listing only directories that match the argument
  or listing all directories within the current directory with no argument

* add tests for symlink that ensure that something can be both a pointer and a partial

* provide a way to specify that a brew cask is installed globally
  https://github.com/caskroom/homebrew-cask/issues/2261

* move as much as you can to be managed by homebrew casks
  - coconutbattery
  - karabiner
  - sonos

* Maybe allow profiles somehow like "work" and "home" so you don't install Sonos at work?

Look into Selecta, heatseeker, fzf, fpp
https://lobste.rs/s/squpog/interactive_filter_new_standard_tool
https://github.com/sgtpep/pmenu#alternatives

* switch to gnu coreutils so you don't depend on any of the Mac built-in BSD-flavor cmdline utils.

* make symlinks/pointers clearer and get the files out of HOME.
  - Make HOME a dumb symlink source. If somehow pointers/symlinks weren't taken into account, setup would symlink into HOME, which isn't correct. So, HOME is semantically overloaded, and is the wrong place for those types of things.
  - There should be a separate 'pointers' directory (LINKS?)
    - the destination should be configured with a .config.json file. That way, where it corresponds to is clear from looking at the directory instead of requiring looking at the global setup file. Also, .config.json should probably be *outside* of the directory that's a pointer so that you don't pollute the contents of a directory owned by another app with config from your app.
    - the json should be a dictionary with at least {'destination': 'path'}
  - Also see if you can unify symlink/pointer semantics?

* get the *app* config (like command line options) out of settings.py.

* get ctrl/opt delete/backspace deleting whole words. Apparently this is complicated:
http://superuser.com/questions/212446/binding-backward-kill-word-to-ctrlw

* https://github.com/kennethreitz/xerox
  - add tests for command line usage and make sure it behaves the same as 'cb' does.
    if it does, then alias cb to xerox



# todos from from switching to zsh
# left to do:
# √* get vcs info in prompt. Built in vcs_info enough? Use plugin?
# √* get autocompletion working in the most badass way possible. Defaults seem to be no better than bash.
#   - is there an equivalent for zsh to source-ing bash_completion?
# * should we use autoloads for anything? Or just automatically source everything?
# * make sure history works exactly how you expect:
#   √- sessions should keep their own history from up arrow (unless you load history)
#   √- but new terminals should have all history available instantly
#   √- history should be timestamped (in the right format - bash's HISTTIMEFORMAT) when you display
#   - history_unique should be totally unnecessary. But even so, can you display
#     the history without timestamps when you want to sort | uniq -n | sort -r it?
#     (dunno if sort -r is the right command, point is to histogram most-used commands)
#   √- ctrl+r works correctly and uses fzf
#   √- up arrow completes partially-typed command like you have it in bash
# √* is inputrc needed in zsh? Some things in bash are provided with it (like history completion)
#   that don't seem to be respected in zsh. ANSWER: it's not, zsh uses ZLE instead of readline.
# √* final pass on anything you've specified in bash config.
# √ set current shell to zsh in homebrew.
# √* can we use arrays for colors in a way that also works in bash? $COL[blue] $COL[bblue] $COL[bold] $COL[dim] etc.


* split things out of prompt into rprompt - suspended/background jobs etc. should go over there prob.
* improve git prompt
*


*include virtual env / pipenv info in prompt

* improve 'bak' to change the multiple-bak filename format to bak.timestamp+a-z.
  - throw an error when you get to z, if you're backing up 26 times in a second you're probably doing something wrong. Or maybe disallow altogether?
  Error: you already backed this file up within the past second? Maybe just use mili's or nano's and don't worry about conflicts. In any case, better to avoid
  just another version of the .bak.bak.bak... scenario.

  some text for bak docs:

  This program is fairly trivial. It doesn't do anything you couldn't already do
   with `cp`, `mv`, and your watch. But it's convenient and makes a common-enough
   case enough-better that it's worth a program. To me at least. If it's not worth
   it to you, don't download it.

  How often have you gone "hmm, will this complicated git command break my repo? I'm not sure, lemme back it up first." Or, I'm going to make a quick edit to this
  image, lemme just back up the original first. How many times have you copied a file and stuck a .bak extension on it? Ever do .bak.bak for a second backup? I have. This will put a timestamp on the end of the .bak filename for you so there's
  no question of when it was created, or winding up with long strings of .bak.bak.bak..

  Maybe you're generating an output file or a log from a program that has a specific name, and while testing you want to start over but keep the existing one around for comparison. Just `bak` it, no need to pick a filename, one will be generated for you.

  It's not meant to replace a full backup program like Arq or Time Machine etc.
  See if you can do an asciinema to show things like:
  * back up file
  * ls to show that it was moved
  * up arrow + as few keystrokes as possible to add -r to the original file to restore it.
