# base config
[user]
	name = Keith Devens
[include]
	# allow machine-specific configuration (eg. work vs home)
	path = ~/.config/machine_specific/.gitconfig
[push]
	default = current
[pull]
	rebase = preserve
[rebase]
	autoStash = true
[status]
	showUntrackedFiles = all

# diff / merge config
[diff]
	tool = kdiff3
[merge]
	tool = kdiff3
[difftool]
	prompt = false
[mergetool]
	prompt = false

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[difftool "vscode"]
    cmd = code -n --wait --diff $LOCAL $REMOTE

# below settings for pager + colors suggested by diff-so-fancy
# https://github.com/so-fancy/diff-so-fancy
[core]
	pager = diff-so-fancy | less --tabs=4 -RFX
	editor = code -n --wait

[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	whitespace = red reverse

# aliases
[alias]
	a = add
	af = !gsf git a
	aa = add -A
	au = add -u
	ap = add -p
	rp = reset -p # reset --patch is the opposite of add --patch
	b = branch
	br = branch -r
	current-branch = symbolic-ref --short HEAD
	current-tags = tag --list --points-at HEAD
	c = commit
	cm = commit -m
	ca = commit -a
	cam = commit -am
	cmp  = "!f() { git cm \"$@\" && git p; }; f"
	camp = "!f() { git cam \"$@\" && git p; }; f"
	co = checkout
	cof = !gsf git co
	cf = !git cof
	cob = checkout -b
	clone-insecure = clone -c http.sslVerify=false
	d = diff
	dt = difftool
	df = !gsf git d
	dtf = !gsf git dt
	# https://stackoverflow.com/a/42956594/
	d1  = "!f() { rev=$(git rev-parse \"${*:-HEAD}\"); git d $rev~1 $rev; }; f"
	dt1 = "!f() { rev=$(git rev-parse \"${*:-HEAD}\"); git dt $rev~1 $rev; }; f"
	ds = diff --staged
	dts = difftool --staged
	dst = difftool --staged
	dl = diff @~..@
	dtl = difftool @~..@
	email = config user.email
	exec = "!exec " # git aliases run from repo root, so can exec something from root
	edit = "!exec $EDITOR ."
	f = fetch
	hash = rev-parse
	hide = update-index --assume-unchanged
	unhide = update-index --no-assume-unchanged
	unhide-all = update-index --really-refresh
	list-hidden = !git ls-files -v | grep '^h' | cut -c3-
	lu = ls-files --others --exclude-standard # "list untracked"
	p = "!f() { if git upstream; then git push; else git push -u; fi }; f" # push, set upstream if necessary
	pf = push --force
	pl = pull
	pr = pull --rebase
	r = rebase
	ra = rebase --abort
	rc = rebase --continue
	ri = rebase -i
	s = status
	st = stash
	stl = stash list
	stp = stash pop
	stpu = stash push
	stpum = stash push -m
	sts = stash show
	stsp = stash show -p
	unstage = reset --
	uncommit = reset @~ --
	upstream = name-rev @{upstream}
	url = remote get-url origin
	info = remote show origin
	rao = remote add origin
	rso = remote set-url origin
	repo-root = rev-parse --show-toplevel
	repo-parent = rev-parse --show-superproject-working-tree # for submodules
	patch = !git --no-pager diff --no-color
	set-upstream = !git branch --set-upstream-to=origin/$(git current-branch)
	l = log --date=format:'%a %Y-%m-%d %k:%M' --pretty=format:'%C(blue)%ad %C(cyan)%cn %C(auto)%h%C(auto)%d%n %s%n%w(0,4,4)%+b' --stat
	lg = "!f() { git log --color=always --graph --pretty=format:'%C(auto)%h %C(auto,green)(%ar)%C(auto)%d%C(reset) %s %C(auto,bold blue)<%an>%C(reset)' \"$@\" | perl -pe 's/([^(]+\\()(\\d+)\\s+(\\w)\\w+[^)]+\\)/$1.sprintf(\"%02d\", $2).$3.\")\"/e' | less -RFX; }; f"
	l1 = log --date=short --pretty=format:'%C(auto,green)%ad %C(auto)%h %C(blue)%<(20,trunc)%an %C(reset)%<(70,trunc)%s%C(auto)%d'
	prune-merged = !git branch --merged | grep -Ev '^\\*' | grep -Evx '\\s*(master|develop)\\s*' | xargs -n1 git branch -d
	prune-remote = remote prune origin # prune branches deleted from remote
	most-edited = !git log --pretty=format: --name-only | sort | uniq -c | sort -rg | head -20
	authors = shortlog -sne
	# fl = "fix last", sl = "squash last"
	fl = commit --amend -C@
	sl = commit --amend -c@
	fixup = "!f() { git commit --fixup $1 && GIT_EDITOR=true git rebase -i --autosquash $1~; }; f"
	squash = "!f() { git commit -C $1 --squash $1 && GIT_SEQUENCE_EDITOR=true git rebase -i --autosquash $1~; }; f"
