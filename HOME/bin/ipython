#!/usr/bin/env python3

"""Fix 'ipython' to handle arguments more like 'python'.

https://twitter.com/keithdevens/status/595294880533876736
this is an imperfect hack because you could do "-c 'command'" and have command
be a file in contrived cases, but this shouldn't cause problems normally

To show why this is necessary, compare:
~$ python -i bin/showargv -i
['bin/showargv', '-i']
...

~$ ipython -i bin/showargv -i
['.../bin/showargv']
...

the right way is to use -- to tell ipython that its arguments are finished
$ ipython -i bin/showargv -- -i
['.../bin/showargv', '-i']

This makes that unnecessary, so 'ipython' is interchangeable with 'python'.

This should be created as 'ipython' but symlinked to 'ipython2' and 'ipython3'

"""

import os
import subprocess
import sys

DEFAULT_ARGS = ['--no-banner', '--no-confirm-exit', '--ext=autoreload']

cmd = '/usr/local/bin/ipython'
if sys.argv[0][-1] in '23456789':
    cmd += sys.argv[0][-1]

args = sys.argv[1:]
for i, arg in enumerate(args):
    if not arg.startswith('-') and os.path.isfile(arg):
        # if arg doesn't start with a dash and the arg is a file
        # then consider this the script passed to ipython and
        # all args after this are args to the script
        break
else:
    i = len(args)

args = DEFAULT_ARGS + args[:i] + ['--'] + args[i:]

subprocess.call([cmd, *args])
