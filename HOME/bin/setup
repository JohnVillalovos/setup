#!/usr/bin/env python3
import argparse
import code
import io
import logging
import os
import re
import subprocess
import zipfile

from lib import config, symlink
from lib.mac import brew, restart_os_functions, update_os_settings

SETTINGS_FILE_LOCATION = 'conf/settings.py'

log = logging.getLogger()


def create_command_line_parser():
    """Create and return the command line parser."""
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true', help='enable debug logging')

    subparsers = parser.add_subparsers(dest='action')

    # status
    subparser = subparsers.add_parser('status', help="Get repository status")
    subparser.set_defaults(func=repo, cmd=['status'])

    # pull
    subparser = subparsers.add_parser(
        'pull', help="Pull repository from server", aliases=['update']
    )
    subparser.set_defaults(func=repo, cmd=['pull'])

    # push
    subparser = subparsers.add_parser('push', help="Push repository to server")
    subparser.set_defaults(func=repo, cmd=['push'])

    # brew
    subparser = subparsers.add_parser('brew', help="üç∫ Homebrewüç∫")
    subparser.add_argument('fix_repo', help="Fix a broken repository", nargs='?')
    subparser.set_defaults(func=brew)

    # packages
    subparser = subparsers.add_parser(
        'packages', help="Install/update language-specific packages üêç"
    )
    subparser.add_argument(
        'language_filter', help="Only update languages matching regex", nargs='?'
    )
    subparser.set_defaults(func=install_packages)

    # addons
    subparser = subparsers.add_parser(
        'addons', help="Install World of Warcraft (and maybe other) addons"
    )
    subparser.set_defaults(func=addons)

    # debug: load the setup program as a module and start an interactive console
    subparser = subparsers.add_parser('debug', help="Start an interactive console")
    subparser.set_defaults(func=debug)

    # edit: open the setup directory in your editor
    subparser = subparsers.add_parser('edit', help="Open the setup directory in your editor")
    subparser.set_defaults(func=edit)

    # https://blog.cloudtroopers.com/how-restart-mac-os-x-finder-dock-or-menubar
    # this should be run if any settings change, but you don't necessarily
    # need to run this every time 'update_os_settings' is run
    subparser = subparsers.add_parser(
        'restart_os_functions', help="Restart Finder, Menubar, Dock, etc."
    )
    subparser.set_defaults(func=restart_os_functions)

    return parser


def repo(settings, *args, **kwargs):
    cmd = ['git'] + kwargs['cmd']
    log.debug(f"cmd is {cmd!r} and kwargs is: {kwargs!r}")
    cmd = [c.format(**kwargs) for c in cmd]
    subprocess.check_call(cmd)


def install_packages(settings, *args, **kwargs):
    log.info("Installing/upgrading language-specific packages")
    language_filter = kwargs['language_filter']
    for language, params in settings['packages'].items():
        if language_filter and not re.search(language_filter, language):
            log.debug(f"Skipping {language}")
            continue

        log.info(f"Installing/upgrading packages for: {language}")
        cmd = params['cmd']
        log.debug(f"Executing: {cmd}")
        subprocess.check_call(cmd)


def addons(settings, *args, **kwargs):
    log.info("Installing addons")
    for type, params in settings['addons'].items():
        log.info(f"Installing addons for {type!r}")
        for addon in params['addons']:
            log.info(f"Downloading addon {addon!r}")
            result = addon_install(type, addon, params['installation_path'])
            if result:
                log.info(f"Successfully installed {addon!r}")
            else:
                log.warning(f"Couldn't install {addon!r}")

    log.info("Finished installing addons")


def addon_install(type, name, installation_path):
    import requests

    uri_pattern = 'http://www.curse.com/addons/wow/{}/download'

    # get the download page
    log.debug(f"Requesting download page for {name!r}")
    response = requests.get(uri_pattern.format(name))
    if response.status_code != 200:
        log.warning(f"Error getting download page for {name}")
        return False

    # parse out the download link
    # download links look like:
    # <p>If your download doesn't begin <a data-project="4872" data-file="887016" data-href="http://addons.curse.cursecdn.com/files/887/16/Recount-v6.2.0f_release.zip" class="download-link" href="#">click here</a>.</p>
    log.debug("Parsing out download uri")
    regex = r'<a\s+.*?data-href="([^"]+)".*?class="download-link"'
    match = re.search(regex, response.text)
    download_uri = match.group(1)

    # download the addon
    log.debug(f"Downloading from {download_uri!r}")
    response = requests.get(download_uri)
    if response.status_code != 200:
        return False

    log.debug(f"Extracting zip content to {installation_path!r}")
    try:
        file = io.BytesIO(response.content)
        zfile = zipfile.ZipFile(file)
        zfile.extractall(installation_path)
    except:
        log.exception(f"Couldn't extract files for {name!r}")
        return False

    return True


def debug(*args, **kwargs):
    code.interact(local=globals()),


def edit(*args, **kwargs):
    subprocess.call('$EDITOR .', shell=True)  # works because cwd is set


def main():
    # this setup program lives in $repo/HOME/bin/, so $repo/HOME/bin/../.. will
    # get the root of the repository. Use realpath to resolve symbolic links
    repo_root_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), '../..'))
    repo_home_dir = os.path.join(repo_root_dir, 'HOME')
    log.debug(f"repo_home_dir is {repo_home_dir!r}")
    os.chdir(repo_root_dir)  # set the cwd to the root of the repository
    home_dir = os.path.expanduser('~')

    # get settings and set up command line parser
    settings = config.load_file(SETTINGS_FILE_LOCATION)
    parser = create_command_line_parser()
    args = parser.parse_args()

    # set up logging
    loglevel = logging.DEBUG if args.debug else logging.INFO
    logging.basicConfig(level=loglevel)

    # set requests loglevel
    logging.getLogger('requests').setLevel(logging.WARNING)

    log.debug(f"Set cwd to {repo_root_dir!r}")
    log.debug(f"Command line arguments were: {args!r}")

    # actually do stuff
    if hasattr(args, 'func'):
        args.func(settings, **vars(args))
    else:
        symlink.create(settings['symlinks'], repo_home_dir, home_dir)
        update_os_settings(settings)


if __name__ == '__main__':
    main()
