#!/usr/bin/env python3
import argparse
import code
import logging
import os
import subprocess
from pathlib import Path

from lib import config, symlink
from lib.mac import brew, restart_os_functions, update_os_settings
from lib.packages import install_packages, addons

SETTINGS_FILE_LOCATION = 'conf/settings.py'

log = logging.getLogger()


def create_command_line_parser():
    """Create and return the command line parser."""
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true', help='enable debug logging')

    subparsers = parser.add_subparsers(dest='action')

    # status
    subparser = subparsers.add_parser('status', help="Get repository status")
    subparser.set_defaults(func=repo, cmd=['status'])

    # pull
    subparser = subparsers.add_parser(
        'pull', help="Pull repository from server", aliases=['update']
    )
    subparser.set_defaults(func=repo, cmd=['pull'])

    # push
    subparser = subparsers.add_parser('push', help="Push repository to server")
    subparser.set_defaults(func=repo, cmd=['push'])

    # brew
    subparser = subparsers.add_parser('brew', help="üç∫ Homebrewüç∫")
    subparser.add_argument('fix_repo', help="Fix a broken repository", nargs='?')
    subparser.set_defaults(func=brew)

    # packages
    subparser = subparsers.add_parser(
        'packages', help="Install/update language/app-specific packages üêç"
    )
    subparser.add_argument(
        'language_filter', help="Only update languages matching regex", nargs='?'
    )
    subparser.set_defaults(func=install_packages)

    # addons
    subparser = subparsers.add_parser(
        'addons', help="Install World of Warcraft (and maybe other) addons"
    )
    subparser.set_defaults(func=addons)

    # debug: load the setup program as a module and start an interactive console
    subparser = subparsers.add_parser('debug', help="Start an interactive console")
    subparser.set_defaults(func=debug)

    # edit: open the setup directory in your editor
    subparser = subparsers.add_parser('edit', help="Open the setup directory in your editor")
    subparser.set_defaults(func=edit)

    # https://blog.cloudtroopers.com/how-restart-mac-os-x-finder-dock-or-menubar
    # this should be run if any settings change, but you don't necessarily
    # need to run this every time 'update_os_settings' is run
    subparser = subparsers.add_parser(
        'restart_os_functions', help="Restart Finder, Menubar, Dock, etc."
    )
    subparser.set_defaults(func=restart_os_functions)

    return parser


def repo(settings, *args, **kwargs):
    cmd = ['git'] + kwargs['cmd']
    log.debug(f"cmd is {cmd!r} and kwargs is: {kwargs!r}")
    cmd = [c.format(**kwargs) for c in cmd]
    subprocess.check_call(cmd)


def debug(*args, **kwargs):
    code.interact(local=globals()),


def edit(*args, **kwargs):
    subprocess.call('$EDITOR .', shell=True)  # works because cwd is set


def main():
    # this program lives in $repo/HOME/bin/, so $repo/HOME/bin/../.. will
    # get the root of the repository. Use resolve() to resolve symlink since
    # this is symlinked into and run from ~/bin.
    repo_root_dir = Path(__file__).resolve().parents[2]
    repo_home_dir = repo_root_dir / 'HOME'
    log.debug(f"repo_home_dir is {repo_home_dir!r}")
    os.chdir(repo_root_dir)  # set the cwd to the root of the repository
    home_dir = Path.home()

    # get settings and set up command line parser
    settings = config.load_file(SETTINGS_FILE_LOCATION)
    parser = create_command_line_parser()
    args = parser.parse_args()

    # set up logging
    loglevel = logging.DEBUG if args.debug else logging.INFO
    logging.basicConfig(level=loglevel)

    # set requests loglevel
    logging.getLogger('requests').setLevel(logging.WARNING)

    log.debug(f"Set cwd to {repo_root_dir!r}")
    log.debug(f"Command line arguments were: {args!r}")

    # actually do stuff
    if hasattr(args, 'func'):
        args.func(settings, **vars(args))
    else:
        symlink.create(settings['symlinks'], repo_home_dir, home_dir)
        update_os_settings(settings)


if __name__ == '__main__':
    main()
